(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{355:function(t,s,a){t.exports=a.p+"assets/img/custom-edge-model.401688ca.png"},380:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"自定义连线"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义连线"}},[t._v("#")]),t._v(" 自定义连线")]),t._v(" "),e("p",[t._v("同自定义节点一样，在具体业务中我们也可能需要对连线进行一定的自定义，比如流程中高亮表示这个流程的执行路径。")]),t._v(" "),e("h2",{attrs:{id:"自定义连线的-model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义连线的-model"}},[t._v("#")]),t._v(" 自定义连线的 Model")]),t._v(" "),e("p",[t._v("连线的"),e("code",[t._v("model")]),t._v("中维护了以下内容。")]),t._v(" "),e("ul",[e("li",[t._v("连线的"),e("RouterLink",{attrs:{to:"/api/edgeApi.html#通用属性"}},[t._v("通用属性")])],1),t._v(" "),e("li",[t._v("连线的"),e("RouterLink",{attrs:{to:"/api/edgeApi.html#边属性"}},[t._v("边属性")])],1)]),t._v(" "),e("p",[t._v("不同类型的属性之间可能存在着依赖关系，为了保证每一种属性都可以正常使用，LF 在连线"),e("code",[t._v("model")]),t._v("的构造函数中按下图顺序进行初始化。")]),t._v(" "),e("img",{staticStyle:{display:"block",margin:"0 auto",zoom:"50%"},attrs:{src:a(355),alt:"连线属性初始化顺序"}}),t._v(" "),e("p",[t._v("与节点一致，当各类属性被初始化完成后，LF 会主动调用"),e("code",[t._v("setAttributes")]),t._v("方法，因此我们可以用这个方法来对节点的属性进行自定义。")]),t._v(" "),e("p",[t._v("例如我们想要实现一条进度连线，若当前进度连线已执行，则显示为绿色。")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("lf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("register")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'process'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RegisterParam"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" LineEdge"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" LineEdgeModel "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RegisterParam"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProcessModel")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LineEdgeModel")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttributes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" propteries"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" isExecuted "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isExecuted"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stroke "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'green'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    view"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" LineEdge"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    model"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ProcessModel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[e("example",{attrs:{href:"/examples/#/advance/custom-edge/process",height:250}})],1),t._v(" "),e("h2",{attrs:{id:"自定义连线的-view"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义连线的-view"}},[t._v("#")]),t._v(" 自定义连线的 View")]),t._v(" "),e("p",[t._v("连线在"),e("code",[t._v("view")]),t._v("中维护了自身的"),e("code",[t._v("VNode")]),t._v("，Logic Flow 渲染连线时会调用"),e("code",[t._v("view")]),t._v("中的"),e("code",[t._v("getShape")]),t._v("方法来确定"),e("code",[t._v("VNode")]),t._v("该如何渲染。")]),t._v(" "),e("h3",{attrs:{id:"getshape"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getshape"}},[t._v("#")]),t._v(" getShape")]),t._v(" "),e("p",[t._v("我们可以通过"),e("code",[t._v("getShape")]),t._v("方法返回 SVG 元素来实现连线的形状，但是内置的直线、折线和曲线已经能满足绝大部分需求，且连线的开发成本较高，这里不详细说明如何自定义连线的形状，如果有需要，建议直接阅读内部连线的"),e("a",{attrs:{href:"https://github.com/didi/LogicFlow/blob/cdc19ddfb6774005b3f57cb4e27d54e8e25572b4/packages/core/src/view/edge/LineEdge.tsx",target:"_blank",rel:"noopener noreferrer"}},[t._v("源码实现"),e("OutboundLink")],1),t._v("。也欢迎将你实现的自定义连线通过"),e("code",[t._v("extension")]),t._v("的方式提交 PR 给我们。")]),t._v(" "),e("h2",{attrs:{id:"extendkey"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extendkey"}},[t._v("#")]),t._v(" extendKey")]),t._v(" "),e("p",[t._v("当我们注册的自定义连线希望可以被其他自定义连线继承时，就需要为"),e("code",[t._v("view")]),t._v("和"),e("code",[t._v("model")]),t._v("都设置一个静态属性"),e("code",[t._v("extendKey")]),t._v("，以便在"),e("code",[t._v("lf.register")]),t._v("的第二个回调函数的参数中被访问到。")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("lf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("register")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CustomEdge'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" BaseEdge"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BaseEdgeModel "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BaseEdge")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" extendKey "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CustomEdgeView'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Model")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BaseEdgeModel")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" extendKey "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CustomEdgeModel'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    view"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" View"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    model"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Model"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);